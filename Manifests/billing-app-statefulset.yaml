apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: billing-app
  namespace: orchestrator
  labels:
    app: billing-app
spec:
  serviceName: billing-service
  replicas: 1
  selector:
    matchLabels:
      app: billing-app
  template:
    metadata:
      labels:
        app: billing-app
    spec:
      containers:
      - name: billing-app
        image: lamoundios7/billing-app:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: orchestrator-configmap
        - secretRef:
            name: orchestrator-secret
        
        # Variables d'environnement spécifiques pour debugging
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: FLASK_ENV
          value: "development"
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
            
        # Script de démarrage avec attente de la base de données
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Waiting for database at ${BILLING_DB_HOST:-billing-database-service}:${BILLING_DB_PORT:-5432}..."
          timeout=120
          counter=0
          while ! nc -z ${BILLING_DB_HOST:-billing-database-service} ${BILLING_DB_PORT:-5432}; do
            sleep 5
            counter=$((counter+5))
            if [ $counter -ge $timeout ]; then
              echo "Timeout waiting for database connection!"
              exit 1
            fi
            echo "Still waiting for database... ($counter seconds elapsed)"
          done
          echo "Database is available, starting application..."
          
          # Attendre aussi RabbitMQ si configuré
          RABBITMQ_HOST_TO_CHECK=${RABBITMQ_HOST:-rabbitmq-service}
          RABBITMQ_PORT_TO_CHECK=${RABBITMQ_PORT:-5672}
          
          # Si RABBITMQ_URL est définie, extraire le host et port de l'URL
          if [ ! -z "${RABBITMQ_URL}" ]; then
            echo "Extracting host and port from RABBITMQ_URL: ${RABBITMQ_URL}"
            # Extraire le host (entre :// et :port ou /)
            RABBITMQ_HOST_TO_CHECK=$(echo ${RABBITMQ_URL} | sed -E 's|^[^:]+://([^:/]+).*|\1|')
            # Extraire le port (après le host)
            RABBITMQ_PORT_TO_CHECK=$(echo ${RABBITMQ_URL} | sed -E 's|^[^:]+://[^:]+:([0-9]+).*|\1|')
            # Si pas de port dans l'URL, utiliser le port par défaut
            if [ "${RABBITMQ_PORT_TO_CHECK}" = "${RABBITMQ_URL}" ]; then
              RABBITMQ_PORT_TO_CHECK=5672
            fi
          fi
          
          echo "Waiting for RabbitMQ at ${RABBITMQ_HOST_TO_CHECK}:${RABBITMQ_PORT_TO_CHECK}..."
          timeout=60
          counter=0
          while ! nc -z ${RABBITMQ_HOST_TO_CHECK} ${RABBITMQ_PORT_TO_CHECK}; do
            sleep 3
            counter=$((counter+3))
            if [ $counter -ge $timeout ]; then
              echo "Warning: RabbitMQ not available, starting anyway..."
              break
            fi
            echo "Still waiting for RabbitMQ... ($counter seconds elapsed)"
          done
          
          echo "Starting billing application..."
          exec python server.py